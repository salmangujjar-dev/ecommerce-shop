generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELED
  IN_PROCESS
  DELIVERED
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(30)
  username  String   @unique
  email     String   @unique
  password  String   @db.VarChar(60) // Stores bcrypt hashed password
  isActive  Boolean  @default(false)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  reviews   Review[]
  orders    Order[]

  @@map("users")
}

model Payment {
  id            String        @id @default(cuid())
  method        PaymentMethod @default(CASH)
  status        PaymentStatus @default(PENDING)
  amount        Decimal       @db.Decimal(10, 2)
  transactionId String?       @unique
  metadata      Json?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique

  @@map("payments")
}

model Order {
  id              String      @id @default(cuid())
  description     String?     @db.VarChar(200)
  payment         Payment?
  products        Product[]   @relation("OrderToProduct")
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(10, 2)
  shippingAddress Json?
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  user            User        @relation(fields: [userId], references: [id])
  userId          String

  @@map("orders")
}

model Gender {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("genders")
}

model Category {
  id            String     @id @default(cuid())
  name          String
  slug          String     @unique
  description   String?
  parentId      String?
  parent        Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToSubcategory")
  products      Product[]
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  @@map("categories")
}

model Product {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  description String           @db.Text
  price       Decimal          @db.Decimal(10, 2)
  rating      Float            @default(0)
  reviewCount Int              @default(0)
  genderId    String
  gender      Gender           @relation(fields: [genderId], references: [id])
  categoryId  String
  category    Category         @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  colors      ProductColor[]
  sizes       ProductSize[]
  reviews     Review[]
  details     String[]         @db.Text
  orders      Order[]          @relation("OrderToProduct")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  variants    ProductVariant[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  src       String
  alt       String
  primary   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([productId, primary], name: "one_primary_per_product")
  @@map("product_images")
}

model Color {
  id             String           @id @default(cuid())
  name           String           @unique
  slug           String           @unique
  bgColor        String
  selectedColor  String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  products       ProductColor[]
  ProductVariant ProductVariant[]

  @@map("colors")
}

model ProductColor {
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorId   String
  color     Color    @relation(fields: [colorId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([productId, colorId])
  @@map("product_colors")
}

model ProductSize {
  id             String           @id @default(cuid())
  productId      String
  product        Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  name           String
  price          Decimal?         @db.Decimal(10, 2) // Optional price for this size
  inStock        Boolean          @default(true)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  ProductVariant ProductVariant[]

  @@map("product_sizes")
}

model ProductVariant {
  id        String      @id @default(cuid())
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  color     Color       @relation(fields: [colorId], references: [id])
  colorId   String
  size      ProductSize @relation(fields: [sizeId], references: [id])
  sizeId    String
  price     Decimal?    @db.Decimal(10, 2)
  inStock   Boolean     @default(true)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@unique([productId, colorId, sizeId])
  @@map("product_variants")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reviews")
}
